import numpy as np
import tensorflow as tf
from tensorflow.keras import layers, models, optimizers, losses, metrics, Model
import os

class CountNet(Model):
	def __init__(self, K, input_shape):
		super(CountNet, self).__init__()
		self.K = K
		self.conv_layer_1         = layers.Conv2D(filters=64, kernel_size=3, strides=1, padding='same', input_shape=input_shape)
		self.batch_norm_layer_1  = layers.BatchNormalization()
		self.dropout_layer_1     = layers.Dropout(0.5)
		self.conv_layer_2         = layers.Conv2D(filters=512, kernel_size=3, strides=1, padding='same')
		self.batch_norm_layer_2  = layers.BatchNormalization()
		self.dropout_layer_2     = layers.Dropout(0.5)
		self.conv_layer_3         = layers.Conv2D(filters=128, kernel_size=3, strides=1, padding='same')
		self.pooling_layer_3        = layers.MaxPooling2D(pool_size=(2, 2))
		self.batch_norm_layer_3  = layers.BatchNormalization()
		self.dropout_layer_3     = layers.Dropout(0.5)
		self.conv_layer_4         = layers.Conv2D(filters=128, kernel_size=3, strides=1, padding='same')
		self.batch_norm_layer_4  = layers.BatchNormalization()
		self.dropout_layer_4     = layers.Dropout(0.5)
		self.conv_layer_5         = layers.Conv2D(filters=256, kernel_size=3, strides=1, padding='same')
		self.pooling_layer_5        = layers.MaxPooling2D(pool_size=(2, 2))
		self.batch_norm_layer_5  = layers.BatchNormalization()
		self.dropout_layer_5     = layers.Dropout(0.5)
		self.conv_layer_6         = layers.Conv2D(filters=64, kernel_size=3, strides=1, padding='same')
		self.batch_norm_layer_6  = layers.BatchNormalization()
		self.dropout_layer_6     = layers.Dropout(0.5)
		self.conv_layer_7         = layers.Conv2D(filters=256, kernel_size=3, strides=1, padding='same')
		self.pooling_layer_7        = layers.MaxPooling2D(pool_size=(2, 2))
		self.batch_norm_layer_7  = layers.BatchNormalization()
		self.dropout_layer_7     = layers.Dropout(0.5)
		self.conv_layer_8         = layers.Conv2D(filters=512, kernel_size=3, strides=1, padding='same')
		self.batch_norm_layer_8  = layers.BatchNormalization()
		self.dropout_layer_8     = layers.Dropout(0.5)
		self.conv_layer_9         = layers.Conv2D(filters=512, kernel_size=3, strides=1, padding='same')
		self.pooling_layer_9        = layers.MaxPooling2D(pool_size=(2, 2))
		self.batch_norm_layer_9  = layers.BatchNormalization()
		self.dropout_layer_9     = layers.Dropout(0.5)
		self.conv_layer_10        = layers.Conv2D(filters=1024, kernel_size=3, strides=1, padding='same')
		self.pooling_layer_10       = layers.MaxPooling2D(pool_size=(2, 2))
		self.batch_norm_layer_10 = layers.BatchNormalization()
		self.dropout_layer_10    = layers.Dropout(0.5)
		self.conv_layer_11        = layers.Conv2D(filters=1024, kernel_size=3, strides=1, padding='same')
		self.pooling_layer_11       = layers.MaxPooling2D(pool_size=(2, 2))
		self.batch_norm_layer_11 = layers.BatchNormalization()
		self.dropout_layer_11    = layers.Dropout(0.5)
		self.conv_layer_12        = layers.Conv2D(filters=2048, kernel_size=3, strides=1, padding='same')
		self.pooling_layer_12       = layers.MaxPooling2D(pool_size=(4, 4))
		self.batch_norm_layer_12 = layers.BatchNormalization()
		self.dropout_layer_12    = layers.Dropout(0.5)
		self.conv_layer_13        = layers.Conv2D(filters=1024 * self.K, kernel_size=3, strides=1, padding='same', activation='sigmoid')
		self.conv_layer_14       =  layers.Conv2D(filters=self.K, kernel_size=3, strides=1, padding='same', activation='sigmoid')
		self.activation_layer    = layers.Activation('relu')

	def call(self, x):
		x = self.conv_layer_1(x)
		x = self.batch_norm_layer_1(x)
		x = self.activation_layer(x)
		x = self.dropout_layer_1(x)
		x = self.conv_layer_2(x)
		x = self.batch_norm_layer_2(x)
		x = self.activation_layer(x)
		x = self.dropout_layer_2(x)
		x = self.conv_layer_3(x) 
		x = self.pooling_layer_3(x)
		x = self.batch_norm_layer_3(x)
		x = self.activation_layer(x)
		x = self.dropout_layer_3(x)
		x = self.conv_layer_4(x)  
		x = self.batch_norm_layer_4(x)
		x = self.activation_layer(x)
		x = self.dropout_layer_4(x)
		x = self.conv_layer_5(x)
		x = self.pooling_layer_5(x)
		x = self.batch_norm_layer_5(x)
		x = self.activation_layer(x)
		x = self.dropout_layer_5(x)
		x = self.conv_layer_6(x)
		x = self.batch_norm_layer_6(x)
		x = self.activation_layer(x)
		x = self.dropout_layer_6(x)
		x = self.conv_layer_7(x)
		x = self.pooling_layer_7(x)
		x = self.batch_norm_layer_7(x)
		x = self.activation_layer(x)
		x = self.dropout_layer_7(x)
		x = self.conv_layer_8(x)
		x = self.batch_norm_layer_8(x)
		x = self.activation_layer(x)
		x = self.dropout_layer_8(x)
		x = self.conv_layer_9(x)
		x = self.pooling_layer_9(x)
		x = self.batch_norm_layer_9(x)
		x = self.activation_layer(x)
		x = self.dropout_layer_9(x)
		x = self.conv_layer_10(x)
		x = self.pooling_layer_10(x)
		x = self.batch_norm_layer_10(x)
		x = self.activation_layer(x)
		x = self.dropout_layer_10(x)
		x = self.conv_layer_11(x)
		x = self.pooling_layer_11(x)
		x = self.batch_norm_layer_11(x)
		x = self.activation_layer(x)
		x = self.dropout_layer_11(x)
		x = self.conv_layer_12(x)
		x = self.pooling_layer_12(x)
		x = self.batch_norm_layer_12(x)
		x = self.activation_layer(x)
		x = self.dropout_layer_12(x)
		x_out = self.conv_layer_13(x)
		prob_out = self.conv_layer_14(x)
		x_out = tf.reshape(x_out, (x_out.shape[0], self.K, -1))
		prob_out = tf.reshape(prob_out, (prob_out.shape[0], self.K))
		# print(x_out.shape, prob_out.shape)
		return x_out, prob_out